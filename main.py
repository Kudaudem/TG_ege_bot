#!/usr/bin/python
# -*- coding: utf-8 -*-
import telebot
from telebot import types
import const
import requests
import json

r_k = True
bot = telebot.TeleBot(const.TOKEN) #–≤ –º–æ–¥—É–ª–µ const.py –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN, —Ç–æ–∫–µ–Ω–æ–º –æ—Ç —Ç–≥ –±–æ—Ç–∞
print("| –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

markdown = const.MARKDOWN



@bot.message_handler(content_types=['text'])
def messages(message):
	userid = str(message.from_user.id)
	username = message.from_user.username
	print(message.text + " | @" + username)
	def get_payment_link(pay,number=const.NUMBER):
		payment = "https://qiwi.com/payment/form/99?extra%5B%27account%27%5D="+number+"&amountInteger=" + pay + "&amountFraction=0&extra%5B%27comment%27%5D="+userid+"&currency=643&blocked[0]=sum&blocked[1]=comment&blocked[2]=account"
		return payment


	if "/start" == message.text:
		markup = types.ReplyKeyboardMarkup(r_k)
		markup.row("üìÑ–û—Ç–≤–µ—Ç—ã","üîçF.A.Q")
		markup.row("üîë–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞","üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

		base_check = open("base.txt","r").read()
		#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–π–¥–∏ –≤ –±–∞–∑–µ
		if userid not in base_check:
			#–∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∞–π–¥–∏ –≤ –±–∞–∑—É
			base = open("base.txt","a")
			base.write("\n"+userid)
		if userid in base_check:
			bot.send_message(userid,"–ú—ã —Å –≤–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã!")

		bot.send_message(userid,"–¢–µ–∫—Å—Ç",reply_markup=markup,parse_mode="markdown")

	if "–æ—Ç–æ—Å–ª–∞—Ç—å" in message.text:
		if const.ADMIN != userid:
			bot.send_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
		if const.ADMIN == userid:
			try:
				base = open("base.txt","r").read()
				splitter = message.text.split("/")
				splitter_of_base = base.split("\n")
				text = splitter[1]
				user_str = 0
				print(splitter_of_base)
				for user in splitter_of_base:
					bot.send_message(user,text)
			except Exception as E:
				bot.send_message(userid,"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
				print(E)


	if message.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		base = open("pays_base.txt","r").read().split("\n")
		print(len(base))
		bot.send_message(userid,"*–í —ç—Ç–æ–º –≥–æ–¥—É, —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–¥—É—Ç —ç–∫–∑–∞–º–µ–Ω—ã*: "+str(len(base)-1) + " —á–µ–ª–æ–≤–µ–∫",parse_mode="markdown")

	if message.text == "üîçF.A.Q":
		bot.send_message(userid,"*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏:*\n\n|_–†–∞–±–æ—Ç–∞–µ–º –æ–∫–æ–ª–æ 2 –ª–µ—Ç_\n|_300+ –æ—Ç–∑—ã–≤–æ–≤_\n|_–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ_\n|_–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã_\n\n*–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n-–ë—É–¥–µ—Ç –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤?\n-_–î–∞, –±—É–¥–µ—Ç, –Ω–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏_\n-–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–æ –ï–ì–≠, –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã?\n-_–û—Ç–≤–µ—Ç—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è, –æ—Ç 11 –¥–æ 24 —á–∞—Å–æ–≤, –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º._\n-–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–∞–∫ –∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?\n-_–í–æ –ø–µ—Ä–≤—ã—Ö, –±–µ–∑ –ø–∞–Ω–∏–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 7 —á–∞—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤._",parse_mode="markdown")

	if message.text == "üìÑ–û—Ç–≤–µ—Ç—ã":
		markup = types.InlineKeyboardMarkup(row_width=1)
		link = get_payment_link("300",const.NUMBER)
		button_buy = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",callback_data="payment",url=link)
		buy_check = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",callback_data="payment_check")
		markup.row(button_buy,buy_check)
		bot.send_message(userid,"*–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏*, –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –∏ —á–∞—Ç, –≥–¥–µ –±—É–¥—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å—Å—è –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã.\n\n–û—Ç–≤–µ—Ç—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –∑–∞ –¥–µ–Ω—å/–∑–∞ –º–∞–∫—Å–∏–º—É–º 11 —á–∞—Å–æ–≤ –¥–æ —ç–∫–∑–∞–º–µ–Ω—ã\n\n*|–¶–µ–Ω–∞ = 300—Ä*\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã', –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",reply_markup=markup,parse_mode="markdown")


	if message.text == "üîë–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞":
		markup = types.InlineKeyboardMarkup(row_width=1)
		link = get_payment_link("1",const.NUMBER)
		button_buy = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",callback_data="payment",url=link)
		buy_check = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",callback_data="payment_check_test")
		markup.row(button_buy,buy_check)
		bot.send_message(userid,"*–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã, –∑–¥–µ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É, –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ –Ω–∞–ª–∏—á–∏–µ –≤ –±–æ—Ç–µ.*\n\n _–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã - 1—Ä—É–±_ \n\n_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'_",reply_markup=markup,parse_mode="markdown")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	userid = call.from_user.id
	
	if call.data == "payment_check":
		url = "https://edge.qiwi.com/payment-history/v2/persons/{0}/payments".format(str(const.NUMBER))
		headers = {"Accept": "application/json", "Content-Type": "application/json", "Authorization": "Bearer " + const.QIWI_T}
		req = requests.get(url, params={"rows": 1, "operation": "IN"}, headers = headers)
		if req.status_code == 200:
			req = req.json()

		js = json.dumps(req)
		js = json.loads(js)
		description = js["data"][0]["comment"]
		payment_last = js["data"][0]["sum"]["amount"]
		if str(description) == str(userid) and payment_last==300:
			bot.send_message(userid,"*–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n_–ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –¥–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç, –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!_\n\n–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –∏ —á–∞—Ç—É –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.",parse_mode="markdown")
			base = open("pays_base.txt","a")
			base.write("\n"+str(userid))
		if str(description) != str(userid):
			bot.send_message(userid,"*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é*, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥._",parse_mode="markdown")


	if call.data == "payment_check_test":
		url = "https://edge.qiwi.com/payment-history/v2/persons/{0}/payments".format(str(const.NUMBER))
		headers = {"Accept": "application/json", "Content-Type": "application/json", "Authorization": "Bearer " + const.QIWI_T}
		req = requests.get(url, params={"rows": 1, "operation": "IN"}, headers = headers)
		if req.status_code == 200:
			req = req.json()

		js = json.dumps(req)
		js = json.loads(js)
		description = js["data"][0]["comment"]

		if str(description) == str(userid):
			bot.send_message(userid,"*–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*",parse_mode="markdown")
		if str(description) != str(userid):
			bot.send_message(userid,"*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é*, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥._",parse_mode="markdown")
	


bot.polling(none_stop=True,interval=0)
