#!/usr/bin/python
# -*- coding: utf-8 -*-

import json
import config
import telebot
import requests
import functions
from telebot import types



bot = telebot.TeleBot(config.TOKEN) #–í –º–æ–¥—É–ª–µ config.py –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN, —Ç–æ–∫–µ–Ω–æ–º –æ—Ç —Ç–≥ –±–æ—Ç–∞
print("Bot is started.")


@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(True, False)
    markup.row("üìÑ–û—Ç–≤–µ—Ç—ã", "üîçF.A.Q")
    markup.row("üîë–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    all_users = functions.get_all_users()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–π–¥–∏ –≤ –±–∞–∑–µ
    if str(message.chat.id) not in all_users:
        with open("base.txt", "a", encoding="utf-8") as f:
            f.write("{}\n".format(message.chat.id))
    else:
        bot.send_message(message.chat.id, "–ú—ã —Å –≤–∞–º–∏ —É–∂–µ –∑–Ω–∞–∫–æ–º—ã!")

    bot.send_message(message.chat.id, config.start_message, reply_markup=markup, parse_mode="markdown")

    functions.message_logger(message.text, message.from_user.username)


@bot.message_handler(commands=["rasl"])
def sending_message(message):
    if message.chat.id == config.ADMIN_ID:
        text = message.text[6:]

        good = 0
        luse = 0

        for chat_id in functions.get_all_users():
            try:
                bot.send_message(chat_id, text, parse_mode="HTML")
                good += 1

            except:
                luse += 1

        bot.send_message(message.chat.id, "{} —é–∑–µ—Ä–æ–≤ –∑–∞–±–∞–Ω–∏–ª–∏ –±–æ—Ç–∞\n{} –Ω–µ –∑–∞–±–∞–Ω–∏–ª–æ".format(luse, good))


@bot.message_handler(commands=["raslb"])
def sending_buyer_message(message):
    if message.chat.id == config.ADMIN_ID:
        text = message.text[6:]
        
        good = 0
        luse = 0

        for chat_id in functions.get_buyers():
            try:
                bot.send_message(chat_id, text, parse_mode="HTML")
                good += 1

            except:
                luse += 1

        bot.send_message(message.chat.id, "{} —é–∑–µ—Ä–æ–≤ –∑–∞–±–∞–Ω–∏–ª–∏ –±–æ—Ç–∞\n{} –Ω–µ –∑–∞–±–∞–Ω–∏–ª–æ".format(luse, good))







@bot.message_handler(content_types=['text'])
def messages(message):
    chat_id = message.from_user.id
    

    if message.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        with open("pays_base.txt","r", encoding="utf-8") as f:
            base = f.read().split("\n")
    
        bot.send_message(chat_id,"*–í —ç—Ç–æ–º –≥–æ–¥—É, —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–¥—É—Ç —ç–∫–∑–∞–º–µ–Ω—ã*: {} —á–µ–ª–æ–≤–µ–∫".format(len(base)),parse_mode="markdown")

    elif message.text == "üîçF.A.Q":
        bot.send_message(chat_id,"*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏:*\n\n|_–†–∞–±–æ—Ç–∞–µ–º –æ–∫–æ–ª–æ 2 –ª–µ—Ç_\n|_300+ –æ—Ç–∑—ã–≤–æ–≤_\n|_–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ_\n|_–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã_\n\n*–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n-–ë—É–¥–µ—Ç –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤?\n-_–î–∞, –±—É–¥–µ—Ç, –Ω–æ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏_\n-–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–æ –ï–ì–≠, –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã?\n-_–û—Ç–≤–µ—Ç—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è, –æ—Ç 11 –¥–æ 24 —á–∞—Å–æ–≤, –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º._\n-–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–∞–∫ –∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?\n-_–í–æ –ø–µ—Ä–≤—ã—Ö, –±–µ–∑ –ø–∞–Ω–∏–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–ª–æ–∂–∏–ª–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 7 —á–∞—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤._",parse_mode="markdown")

    elif message.text == "üìÑ–û—Ç–≤–µ—Ç—ã":
        link = functions.get_payment_link(config.price, config.qiwi_number, message.chat.id)

        markup = types.InlineKeyboardMarkup()
        button_buy = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", url=link)
        buy_check = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="payment_check")
        markup.row(button_buy,buy_check)
        bot.send_message(chat_id, "*–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏*, –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –∏ —á–∞—Ç, –≥–¥–µ –±—É–¥—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å—Å—è –∏ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç—ã.\n\n–û—Ç–≤–µ—Ç—ã –≤—ã–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –∑–∞ –¥–µ–Ω—å/–∑–∞ –º–∞–∫—Å–∏–º—É–º 11 —á–∞—Å–æ–≤ –¥–æ —ç–∫–∑–∞–º–µ–Ω—ã\n\n*|–¶–µ–Ω–∞ = {}—Ä*\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã', –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'".format(config.price),reply_markup=markup,parse_mode="markdown")


    elif message.text == "üîë–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞":
        link = functions.get_payment_link(config.test_price, config.qiwi_number, message.chat.id)

        markup = types.InlineKeyboardMarkup()
        button_buy = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="payment", url=link)
        buy_check = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="payment_check_test")
        markup.row(button_buy,buy_check)
        bot.send_message(chat_id,"*–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã, –∑–¥–µ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É, –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–µ –Ω–∞–ª–∏—á–∏–µ –≤ –±–æ—Ç–µ.*\n\n _–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã - 1—Ä—É–±_ \n\n_–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'_",reply_markup=markup,parse_mode="markdown")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    chat_id = call.from_user.id
    
    if call.data == "payment_check":
        url = "https://edge.qiwi.com/payment-history/v2/persons/{0}/payments".format(str(config.qiwi_number))
        headers = {"Accept": "application/json", "Content-Type": "application/json", "Authorization": "Bearer " + config.qiwi_token}
        req = requests.get(url, params={"rows": 1, "operation": "IN"}, headers=headers)

        js = json.dumps(req)
        js = json.loads(js)
        description = js["data"][0]["comment"]
        payment_last = js["data"][0]["sum"]["amount"]

        if str(description) == str(chat_id) and payment_last == config.price:
            bot.send_message(chat_id, "*–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n_–ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –¥–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç, –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!_\n\n–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –∏ —á–∞—Ç—É –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞.",parse_mode="markdown")
            
            with open("pays_base.txt", "a", encoding="utf-8") as f:
                f.write("{}\n".format(chat_id))

        else:
            bot.send_message(chat_id, "*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é*, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥._", parse_mode="markdown")


    if call.data == "payment_check_test":
        url = "https://edge.qiwi.com/payment-history/v2/persons/{0}/payments".format(str(config.qiwi_number))
        headers = {"Accept": "application/json", "Content-Type": "application/json", "Authorization": "Bearer " + config.qiwi_token}
        req = requests.get(url, params={"rows": 1, "operation": "IN"}, headers=headers)

        js = json.dumps(req)
        js = json.loads(js)
        description = js["data"][0]["comment"]

        if str(description) == str(chat_id):
            bot.send_message(chat_id, "*–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*", parse_mode="markdown")
        elif str(description) != str(chat_id):
            bot.send_message(chat_id, "*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é*, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. _–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥._", parse_mode="markdown")
    


bot.polling()
